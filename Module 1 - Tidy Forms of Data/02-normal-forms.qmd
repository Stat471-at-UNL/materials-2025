---
title: 'Normal Forms of data'
date: '2025-09-02'
engine: knitr
type: slides
execute:
  error: true
  eval: true
  echo: false
format:
  revealjs:
    navigation-mode: vertical
    logo: ../../N.svg
    includes:
      in_header: ../../header.html
categories:
- Week02
--- 

```{r message=FALSE, warning=FALSE}
library(tidyverse)
```

# Double entry or error?

The data set below is tidy, but does not allow us to distinguish between two Alices in the class or a data entry

```{r}
students <- data.frame(
  student_name = c("Alice", "Alice", "Bob", "Bob", "Alice", "Alice"),
  course = c("Math", "Science", "Math", "Science", "Math", "Science"),
  grade = c(85, 92, 78, 88, 82, 90)
)

students
```

- solution(?) - add a last name!
```{r echo = TRUE}
students$last_name <- rep(c("A", "B", "B"), each = 2)
```

# IDs over names

Identifiers help us to 

- distinguish between individuals with the same name, 
- track individuals across name changes

```{r echo = TRUE}
students$student_id <- rep(1:3, each = 2)
```


# First normal form 

A tidy data set is in first normal form, if it has a **key**.

<br>


The *key of a data set* is defined as the (set of) variable(s) that uniquely identifies each row

A key should be *stable* and *unique* over time.



# What is the key?

```{r}
students
```

# Key variables

- Identifying the key needs some practice

- Maybe helpful: think about the problem as statistical design question (what is designed ahead of a study, what is observed)

- all design variables are part of the key

- no measurement variable should be part of the key

# Issues with 1st normal form data

Potential consistency issues ("split key problems"):

- **Update anomaly**: e.g. change to person's name  must be made in multiple rows
- **Insert anomaly**: e.g. student can't be registered without being enrolled in at least one class
- **Delete anomaly**: e.g. student can't withdraw from classes without being removed completely


Efficiency problem:

- **Storage waste**:  `student_name` and `last_name` repeated unnecessarily

# Second Normalform

A data set is in second normal form if

1. it is in first normal form, and
2. all non-key variables depend on all parts of the key (no split key).


# Normalizing from 1st to 2nd

If the key is split, split the dataset into two:

:::: {.columns}

::: {.column width="40%"}

```{r echo=TRUE}
students_registered <- students |> 
  group_by(student_id) |>
  summarize(first = student_name[1], 
            second = last_name[1])

students_registered
```
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="40%"}

```{r echo=TRUE}
students_enrolled <- students |>
  select(student_id, course, grade) 

students_enrolled
```

:::

::::

# Adding letter grades

Assume that the registrar adds letter grades to the dataset `students_enrolled`:

```{r}
students_enrolled$letter_grades <- c("B", "A-", "C+", "B+", "B-", "A-")
```

Why could this be a potential problem?

# Issues with the second Normal form

Potential consistency issue: 

- **transitive dependencies**: e.g. change to points might require a change to the letter grade.


# Third Normalform

A data set is in third normal form if

1. it is in second normal form, and
2. no non-key variable determines the values of another non-key variable (no transitive dependency)

# Normalizing from 2nd to 3rd

If there is a transitive dependency, 

- remove the dependent variable from the dataset

- create a new table to capture the dependency 

```{r echo = TRUE}
grading_scheme <- data.frame(
    letter_grade = c("F", "D-", "D", "D+", "C-", "C", "C+", 
            "B-", "B", "B+", "A-", "A", "A+"),
    point_minimum = c(0, 60, 63, 67, 70, 73, 77, 80, 83, 87, 90, 93, 97)
)
```

- and encode the dependency as function
```{r echo=TRUE}
point_to_letter <- function(point) {
  idx <- max(which(point >= grading_scheme$point_minimum))
  
  grading_scheme$letter_grade[idx]
}
```

```{r}
point_to_letter(30)
point_to_letter(99)
```




# Additional Resources

Another example data set: [25  Normal Forms of Data
](https://srvanderplas.github.io/stat-computing-r-python/part-wrangling/05b-normal-forms.html)

Watch https://www.youtube.com/watch?v=GFQaEYEc8_8
