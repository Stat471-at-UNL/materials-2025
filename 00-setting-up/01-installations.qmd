---
title: 'R, RStudio, git'
date: '2025-08-26'
engine: knitr
type: slides
execute:
  error: true
  eval: false
categories:
- Week01
format:
  revealjs:
    navigation-mode: vertical
    logo: ../../N.svg
    includes:
      in_header: ../../header.html
---

# Work environment in this class

- R in the RStudio IDE

- Github repositories for 

  - homework assignments
  - final project


# How current is your environment?

Jenny Bryan, Happy Git and GitHub for the useR, chapter 5.1:  

> Get current, people. 

Good practice: 

  - R: don't fall behind more than one minor version (update once a year)
  - RStudio: new features are constantly released. (Jenny: once a month, Heike: whenever I think of it - maybe twice a year??)
  - git: update with operating system
  
# Homework for next Tuesday: check your installations and update if needed  

{{< include ../../homework-repos/homework-0-setup-B/Readme.md >}}

# Using AI tools

- We will be using LLMs in this course

- We need to document any use (save prompt & output)

- We need to critically assess any output

# The problem with AIs

- non-deterministic (different day, different luck)

- model updated quietly by providers

- inconsistent performance, seemingly not related to task difficulty

![](../images/performance-difficulty-blank.png)

# Perceived Performance of AI tools

![](../images/performance-difficulty-saw.png)

# AI Setup in R

- package `ellmer` supports integration with most LLM providers
- you will need to sign up for a service (market changes fast - Gemini offers a year of free Gemini Pro, OpenAI gives $18/m credit)
- `chat <- ellmer::chat_anthropic()` opens chat with claude
- `live_console(chat)` uses the console as a chat, exit with `Q`

